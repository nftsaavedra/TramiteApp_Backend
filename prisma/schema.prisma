// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// -------------------
// Modelos de Autenticación y Usuarios
// -------------------

model User {
  id                 String       @id @default(cuid())
  email              String       @unique
  name               String
  password           String
  role               Role         @default(RECEPCIONISTA)
  isActive           Boolean      @default(true)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  oficina            Oficina?     @relation(fields: [oficinaId], references: [id])
  oficinaId          String?
  movimientosCreados Movimiento[]
  tramitesAsignados  Tramite[]    @relation("TramitesAsignados")
  anotacionesCreadas Anotacion[]
  @@map("users")
}

enum Role {
  RECEPCIONISTA
  ANALISTA
  ASESORIA
  ADMIN
}

// -------------------
// Modelos de Catálogo y Parametrización
// -------------------


enum TipoOficina {
  ORGANO_ALTA_DIRECCION
  ORGANO_DE_LINEA
  UNIDAD_ORGANICA
  ORGANO_DE_ASESORAMIENTO
  ORGANO_DE_APOYO
  EXTERNA
}

model Oficina {
  id                 String              @id @default(cuid())
  nombre             String              @unique
  siglas             String              @unique
  tipo               TipoOficina
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  parentId           String?
  parent             Oficina?            @relation("JerarquiaOficinas", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children           Oficina[]           @relation("JerarquiaOficinas")
  usuarios           User[]
  tramitesOriginados Tramite[]
  movimientosOrigen  Movimiento[]
  movimientosDestino MovimientoDestino[]
  @@map("oficinas")
}

model TipoDocumento {
  id          String       @id @default(cuid())
  nombre      String       @unique
  descripcion String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tramites    Tramite[]
  movimientos Movimiento[]
  @@map("tipos_documento")
}

// -------------------
// Modelos del Core de Trámites
// -------------------

model Tramite {
  id                      String           @id @default(cuid())
  // --- AJUSTE: Campos para el número de documento ---
  numeroDocumento         String // El 'XXX' que ingresa el usuario
  numeroDocumentoCompleto String // El nombre completo generado por el sistema
  // ----------------------------------------------------
  asunto                  String
  notas                   String?
  observaciones           String?
  estado                  EstadoTramite    @default(ABIERTO)
  prioridad               PrioridadTramite @default(NORMAL)
  fechaDocumento          DateTime
  fechaIngreso            DateTime         @default(now())
  fechaCierre             DateTime?
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  tipoDocumento           TipoDocumento    @relation(fields: [tipoDocumentoId], references: [id])
  tipoDocumentoId         String
  oficinaRemitente        Oficina          @relation(fields: [oficinaRemitenteId], references: [id])
  oficinaRemitenteId      String
  usuarioAsignado         User?            @relation("TramitesAsignados", fields: [usuarioAsignadoId], references: [id])
  usuarioAsignadoId       String?
  movimientos             Movimiento[]
  anotaciones             Anotacion[]
  @@map("tramites")
}

enum EstadoTramite {
  ABIERTO
  CERRADO
  ARCHIVADO
}

enum PrioridadTramite {
  BAJA
  NORMAL
  ALTA
  URGENTE
}


model Movimiento {
  id                      String        @id @default(cuid())
  tipoAccion              TipoAccion
  // --- AJUSTE: Campos para el número de documento del movimiento ---
  numeroDocumento         String? // El 'XXX' manual y opcional
  numeroDocumentoCompleto String? // El nombre completo generado y opcional
  // ----------------------------------------------------------------
  fechaDocumento          DateTime?
  notas                   String?
  observaciones           String?
  fechaCierre             DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  tramite                 Tramite       @relation(fields: [tramiteId], references: [id])
  tramiteId               String
  usuarioCreador          User          @relation(fields: [usuarioCreadorId], references: [id])
  usuarioCreadorId        String
  oficinaOrigen           Oficina       @relation(fields: [oficinaOrigenId], references: [id])
  oficinaOrigenId         String
  tipoDocumento           TipoDocumento? @relation(fields: [tipoDocumentoId], references: [id])
  tipoDocumentoId         String?
  destinos                MovimientoDestino[]
  @@map("movimientos")
}

enum TipoAccion {
  DERIVACION
  RESPUESTA
  ASIGNACION
  ARCHIVO
  CIERRE
}

model MovimientoDestino {
  id               String        @id @default(cuid())
  tipoDestino      TipoDestino   @default(PRINCIPAL)
  fechaRecepcion   DateTime?
  estado           EstadoDestino @default(PENDIENTE)
  movimiento       Movimiento    @relation(fields: [movimientoId], references: [id])
  movimientoId     String
  oficinaDestino   Oficina       @relation(fields: [oficinaDestinoId], references: [id])
  oficinaDestinoId String
  @@map("movimiento_destinos")
}

enum TipoDestino {
  PRINCIPAL
  COPIA
}

enum EstadoDestino {
  PENDIENTE
  RECIBIDO
  ATENDIDO
}

model Anotacion {
  id        String   @id @default(cuid())
  contenido String
  createdAt DateTime @default(now())
  tramite   Tramite  @relation(fields: [tramiteId], references: [id])
  tramiteId String
  autor     User     @relation(fields: [autorId], references: [id])
  autorId   String
  @@map("anotaciones")
}


// -------------------
// Modelos de Soporte (Trazabilidad)
// -------------------

model Feriado {
  id          String   @id @default(cuid())
  fecha       DateTime @unique @db.Date
  descripcion String
  @@map("feriados")
}